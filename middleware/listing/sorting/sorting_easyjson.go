// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sorting

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1afec5d2EncodeGithubComIfreddyrondonCaptureAppListingSorting(out *jwriter.Writer, in Sorting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Sort != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sort\":")
		if in.Sort == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Sort).MarshalJSON())
		}
	}
	if len(in.Available) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"available\":")
		if in.Available == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Available {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Raw((v3).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

func easyjson1afec5d2EncodeGithubComIfreddyrondonCaptureAppListingSorting1(out *jwriter.Writer, in Sort) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	out.RawByte('}')
}
